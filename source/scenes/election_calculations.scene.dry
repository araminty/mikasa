title: Election
on-arrival: {!

function logistic_convert(x, u, s) {
    // logistic cdf function
    return 1 / (1 + Math.exp((u - x) / s));
}


piecewise_mult = (a, b) => a.map((x, i) => (a[i] || 0) * (b[i] || 0))
piecewise_add = (a, b) => a.map((x, i) => (a[i] || 0) + (b[i] || 0))
piecewise_sub = (a, b) => a.map((x, i) => a[i] - b[i])
sum_list = (numbers) => numbers.reduce((sum, num) => (sum || 0) + (num || 0));

function piecewise_sum(...lists_to_sum) {
    total = lists_to_sum[0]
    for (var i = 1; i < lists_to_sum.length; i++) {
        next_list = lists_to_sum[i] ?? [0] * total.length;
        total = piecewise_add(total, next_list);
    }
    return total
}



function motivation_percentages(interest_strength, ideology_strength, demo_adjust) {

    if (demo_adjust >= 0) {
        interest_percent = 1 - (1 - interest_strength / 100) * .9 ** demo_adjust;
    } else {
        interest_percent = (interest_strength / 100) * .9 ** (-demo_adjust);
    }

    ideology_percent = (1 - interest_percent) * ideology_strength / 100

    if (interest_percent + ideology_percent > 1) {
        interest_percent = interest_percent / (interest_percent + ideology_percent)
        ideology_percent = ideology_percent / (interest_percent + ideology_percent)
    }
    apathy_percent = 1 - interest_percent - ideology_percent;

    return [interest_percent, ideology_percent, apathy_percent]
}

function ideology_strengths() {
    // how strong each ideology is in the current political scene
    return [
        Q.progress_meme_strength, Q.patriot_meme_strength,
        Q.trade_meme_strength, Q.autark_meme_strength,
        Q.rebel_meme_strength, Q.stake_meme_strength, Q.vigil_meme_strength
    ]
}




function cdf_normalize(strengths) {
    sum = 0;
    u = Q.u ?? 5;// the value that gives 50% on the logistic cdf
    s = Q.s ?? 3;// the standard deviation on the logistic cdf

    adjusted = []
    total = 0;
    for (var i=0; i<strengths.length; i++) {
        converted = logistic_convert(strengths[i],u,s)
        adjusted.push(converted)
        total += converted;
    }

    return adjusted.map(i => i/total)
}



function assign_percentages (raw_votes, n_seats) {

    total_votes = sum_list(raw_votes);
    votes_per_seat = total_votes/n_seats;

    remainders = raw_votes.map(i => i % votes_per_seat)
    whole_seats = piecewise_sub(raw_votes, remainders).map(i => i/votes_per_seat)

    unassigned = n_seats - sum_list(whole_seats)

    for (var i=0; i<unassigned; i++){
        var idx = remainders.reduce((iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0);
        whole_seats[idx]+=1;
        remainders[idx]=0;
    }
    return whole_seats.map(i => Math.round(i));
}

function generic_vote(electorate = Q.electorates[8], district = 0, nseats = 100) {
    // Q.fudge_factor
    // 1. get interest + ideology strengths by demographic
    // 2. get size of interest group
    // 3. get size of ideologies 
    if (typeof electorate === 'number') {
        electorate = Q.electorates[electorate];
    }

    demo_groups = electorate.slice(0, Q.demo_names.length);
    votes_in_interest_groups = electorate.slice(Q.demo_names.length, electorate.length - 1);
    votes_in_ideologies = [ 0,0,0,0,0,0,0,0,0 ] ;
    total_apathy_votes = 0;
    party_votes = [ 0,0,0,0,0 ];

    if (electorate[electorate.length] = "p") {
        if (district != 0){demo_groups = Q.dvar_list[district-1];
        } else {demo_groups =piecewise_sum(Q.dvar_list)}
    }


    // 1. get interest + ideology strengths by demographic

    interest_strength = Q.interest_strength ?? 20; // baseline strength of interest groups, shouldn't change too much but might
    meme_strengths = ideology_strengths();
    meme_total_strength = sum_list(meme_strengths) ?? 0;

    // first we assign all the demographic vote into interest groups or ideologies
    for (var i = 0; i < demo_groups.length; i++) {
        electorate_size = demo_groups[i];
        if (electorate_size > 0) {
            interest_adjustment = Q.interest_adjustments[i] // how much interest group drives the demo
            // TODO: replace this with a prosperity adjusted guild affinities
            interest_group_memberships = Q.interest_group_memberships[i];
            strengths = motivation_percentages(interest_strength, meme_total_strength, interest_adjustment);

            demo_all_interest_votes = strengths[0] * electorate_size;
            demo_all_ideology_votes = strengths[1] * electorate_size;
            demo_all_apathy_votes = strengths[2] * electorate_size;

            // assign to different interest groups
            new_interest_votes = interest_group_memberships.map(i => i * demo_all_interest_votes);
            // assign to different ideology types
            new_ideology_votes = meme_strengths.map(i => i * demo_all_ideology_votes);

            votes_in_interest_groups = piecewise_add(votes_in_interest_groups, new_interest_votes);
            votes_in_ideologies = piecewise_add(votes_in_ideologies, new_ideology_votes);
            total_apathy_votes = total_apathy_votes + demo_all_apathy_votes;
        }
    }

    // then we go through each interest group and each ideology and assign them to the five different parties
    
    for (var i = 0; i < Q.interest_group_voting_habits.length; i++) {
        habits = Q.interest_group_voting_habits[i]
        group_votes = votes_in_interest_groups[i]

        if (group_votes>0) {
        ideology_percentages = cdf_normalize(habits);
        new_votes = ideology_percentages.map( i => i * group_votes)
        party_votes = piecewise_add(party_votes, new_votes)

        // interest_name = Q.interest_names[i];
        // console.log(interest_name, habits, group_votes)
        // console.log(interest_name, new_votes)

        }
    }

    for (var i = 0; i < Q.meme_names.length; i++) {
        habits = Q.ideology_voting_habits[i]
        group_votes = votes_in_ideologies[i]

        if (group_votes>0) {
        ideology_percentages = cdf_normalize(habits);
        new_votes = ideology_percentages.map( i => i * group_votes)
        party_votes = piecewise_add(party_votes, new_votes)
        
        // ideology_name = Q.meme_names[i];
        // console.log(ideology_name, habits, group_votes)
        // console.log(ideology_name, new_votes)
        }
    }

    seats = assign_percentages(party_votes, nseats);

    return [seats, party_votes, votes_in_interest_groups, votes_in_ideologies]


}

function update_projections(){

    // executive seats
    executive_seats = Q.executive_seats ?? 140;
    result = generic_vote(electorate=8, district=0, nseats=executive_seats);
    Q.projections.executive = result[0];

    //guild seats
    for (var i = 0; i < 8; i++){
        color = Q.guild_colors[i];
        result = generic_vote(electorate=i, district=0, nseats=Q.guild_seats[i]);
        Q.projections['guild_'+color]=result[0];
    }

    //geographic seats
    for (var i = 1; i < 8; i++){
        result = generic_vote(electorate=9, district=i, nseats=20);
        Q.projections['district_'+i]=result[0];
    }
}

update_projections();

Q.foobar = Q.projections.executive;
Q.C_exec = Q.projections.executive[0];
Q.G_exec = Q.projections.executive[1];
Q.D_exec = Q.projections.executive[2];
Q.H_exec = Q.projections.executive[3];
Q.I_exec = Q.projections.executive[4];

!}


= Seat Projections:

Executive:
{!<span style="color: #44b88f;">Corporate Proxies</span>!}: [+ C_exec +]
{!<span style="color: #cf6e19;">Criminal Proxies</span>!}: [+ G_exec +]
{!<span style="color: #1100cc;">Democrats</span>!}: [+ D_exec +]
{!<span style="color: #c00000;">Hate Groups</span>!}: [+ H_exec +]
{!<span style="color: #404040;">Independents</span>!}: [+ I_exec +]


